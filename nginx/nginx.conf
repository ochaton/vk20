worker_processes  1;
worker_priority   0;
worker_rlimit_nofile 1024;

error_log	/var/log/nginx/error.log warn;
pid	/var/run/nginx.pid;

events {
	worker_connections	512;
	use			epoll;
}

http {
	client_body_temp_path /var/client_body_temp;
	include       mime.types;
	default_type  application/octet-stream;

	client_header_timeout   30;
	client_body_timeout     60;
	send_timeout            60;

	gzip            off;
	gzip_min_length 1100;
	gzip_buffers    8 16k;
	gzip_types      text/plain application/x-javascript text/css;

	keepalive_timeout       0;

	access_log      /var/log/nginx/access.log;

	client_max_body_size 15m;
	large_client_header_buffers 4 16k;

	proxy_connect_timeout           15;
	proxy_send_timeout              200;
	proxy_read_timeout              200;
	proxy_redirect                  off;
	proxy_set_header                Host $host;
	add_header        X-Host        $hostname;

	log_format ssl_comb '$remote_addr - $remote_user [$time_local] '
						'"$request" $status $body_bytes_sent '
						'"$http_referer" "$http_user_agent"';

	init_by_lua_block {
		package.cpath = package.cpath .. ";/usr/lib64/lua/5.1/?.so"
	}

	upstream tarantool_vk {
		server ****;
	}

	server {
		listen 127.0.0.1:8080;

		location /vk/ {
			internal;
			tnt_method ****;
			tnt_pass_http_request on parse_args pass_body;
			tnt_pass tarantool_vk;
		}

		location /auth/ {
			default_type text/html;

			rewrite_by_lua_block {
				local ngx = require "ngx"
				local cjson = require "cjson"

				local map = {
					GET = ngx.HTTP_GET,
					POST = ngx.HTTP_POST,
				}

				ngx.req.read_body()
				local res = ngx.location.capture("/vk/", {
					args = ngx.var.args,
					method = map[ngx.var.request_method],
					body = ngx.req.get_body_data()
				})

				if res.status ~= ngx.HTTP_OK then
					ngx.log(ngx.WARN, "Result: " .. cjson.encode(res))
					ngx.status = res.status
					ngx.say(res.body)
					return
				end

				local reply = cjson.decode(res.body).result
				do
					local status = reply[1] or reply.status
					ngx.log(ngx.WARN, "Status: " .. status)
					local headers = reply[2] or reply.headers
					local body    = reply[3] or reply.body

					ngx.status = status
					for k,v in pairs(headers) do
						ngx.header[k] = v
					end

					if body then
						ngx.say(body)
					else
						ngx.say("")
					end
					ngx.exit(ngx.OK)

					return
				end
			}
		}
		# return 404;
	}
}
